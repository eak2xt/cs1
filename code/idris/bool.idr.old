module bool

import pair

data bool = true | false

id_bool: bool -> bool
id_bool b = b

constFalse: bool -> bool
constFalse _ = false

constTrue: bool -> bool
constTrue _ = true

not: bool -> bool
not true = false
not _ = true

andp: pair bool bool -> bool
andp (mkPair true true) = true
andp _ = false
-- given a pair of bool values, (a, b), return true if both a and b are true, otherwise return false

orp: pair bool bool -> bool
orp (mkPair true true) = true
orp (mkPair true false) = true
orp (mkPair false true) = true
orp (mkPair false false) = false
-- given a pair of bool values, (a, b), return false if both a and b are false, otherwise return true

nandp: pair bool bool -> bool
nandp (mkPair true true) = false
nandp _ = true
-- short for "not and", given a pair of bool values, (a, b), return false if both a and b are true, and true otherwise

xorp: pair bool bool -> bool
xorp (mkPair true true) = false
xorp (mkPair true false) = true
xorp (mkPair false true) = true
xorp (mkPair false false) = false
-- short for "exclusive or", given a pair of bool values, (a, b), return true if exactly one of a or b is true, and false otherwise

--Exam Problem #2: There are four possible ways to fill in the result column for a truth table for a binary Boolean function, and there are thus exactly four such functions, and no more.

pand: bool -> (bool -> bool)
pand true = id
pand false = constFalse

por: bool -> (bool -> bool)
por true = constTrue
por false = id

pxor: bool -> (bool -> bool)
pxor true = not
pxor false = id

pnand: bool -> (bool -> bool)
pnand true = not
pnand false = constTrue

--binary functions (bool -> bool -> bool), implicit

and: bool -> (bool -> bool)
and true true = true
and _ _ = false

uf: bool -> bool
uf = (and true)

or: bool -> (bool -> bool)
or false false = false
or _ _ = false
